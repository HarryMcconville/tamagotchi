package com.makers.tamagotchi.Repository;

import com.makers.tamagotchi.Model.User;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
public class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;

    @Test
    @DisplayName("Should save and retrieve user by email") // this is the test name
    void testFindUserByEmail() {
        // Given a new user (with a null ID as db generates this automatically):
        User user = new User(null, "Noodle", true, "noodle@noods.com");
        // They should be saved to the database:
        userRepository.save(user);
        // And when we try to find that user by email:
        Optional<User> found = userRepository.findUserByEmail("noodle@noods.com");
        // Then that user should be found
        assertThat(found).isPresent();
        // They should equal the userID generated by the database
        assertThat(found.get().getId()).isEqualTo(user.getId());
        // Their display name should be equal to the input
        assertThat(found.get().getDisplayName()).isEqualTo("Noodle");
        // And they should show as enabled
        assertThat(found.get().isEnabled()).isTrue();

        System.out.println("Noodle was added and successfully found by email!");
    }

    @Test
    @DisplayName("Should return empty when email not found")  // this is the test name
    void testFindUserByEmail_NotFound() {
        // When email is not found
        Optional<User> found = userRepository.findUserByEmail("nonexistentnoodle@noods.com");

        // Then that should give an empty result
        assertThat(found).isEmpty();
        System.out.println("Testing empty return if no email found passed successfully!");
    }
}

